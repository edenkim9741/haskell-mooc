[Ex 1]
if문을 이용하여 각 a와 b에 measure 함수를 적용한 결과 중 어떤 것이 큰지 비교하여 크다면 a를 반환하고 그렇지 않다면 b를 반환하는 함수를 작성하였다.

[Ex 2]
pattern matching을 이용하여 인수로 Nothing이 들어왔다면 Nothing을 반환하고 Just x가 들어왔다면 Just (f x)를 반환하도록 하는 함수를 작성하였다.

[Ex 3]
Ex 2와 마찬가지로 pattern matching을 이용하여 해결하였고, a와 b가 모두 Just a, Just b가 들어왔다면 $를 이용하여 괄호를 줄인 형태로 Just f $ a b를 반환하였다.

[Ex 4]
palindrome 함수는 리스트를 받아서 해당 리스트가 palindrome을 만족하는지를 반환한다. 그렇기 때문에 type은 palindrome :: (Eq a) => [a] -> Bool가 된다. (Eq a)의 type class가 있는 이유는 == 연산을 사용하기 때문에 a가 == 연산이 가능해야 하기 때문이다. firstHalf는 firstHalf :: [a] -> [a]의 타입을 갖는다. 특별한 것은 없지만 리스트의 길이가 홀수인 경우에는 `div`연산을 한 결과보다 1을 더해서 반환해주어야하기 때문에 where을 이용하였다.

[Ex 5]
문제를 해결하기 위해 string을 받았을 때 첫 문자를 대문자로 바꿔주는 함수 firstUpper를 where문으로 작성하였다. map을 이용하여 words로 반환된 [String]에 firstUpper를 적용하였고 이렇게 나온 [String]을 하나의 String으로 붙여주기 위해서 unwords를 사용하였다.

[Ex 6]
문제에서 주어진 힌트를 활용하여 takeWhile을 이용하여 max보다 작거나 같은 원소들을 반환하였다. 이때 들어가는 리스트는 list comprehension을 이용한 [k^i | i <- [0 ..]]이다. [k^0, k^1, k^2, ...]와 같은 형태로 무한대로 원소를 가지는 리스트를 의미한다.

[Ex 7]
recursion을 활용하여 check value가 true라면 update한 value를 가지고 while을 한 번 더 실행하고 만족하지 않는다면 value를 반환하도록 하였다.

[Ex 8]
Left가 반환되었을 때에는 whileRight문이 종료될 때이므로 check로부터 반환 받은 값을 그대로 반환하고, Right가 반환되었을 때에는 해당 값으로 whileRight를 한 번 더 실행되도록 하였다.

[Ex 9]
filter ((==n).length)를 이용하여 길이가 n인 리스트들만을 반환하도록 하였다. 이때 입력으로 들어가는 리스트는 list comprehension을 이용하여 주어진 String 리스트 중 2개를 선택하여 만든 리스트이다.

[Ex 10]
pattern matching을 이용하여 빈 리스트가 피연산자로 들어온 경우를 처리해주었고, 그렇지 않은 경우에는 (x:xs) 리스트 표기법을 이용하여 두 리스트의 head를 연결하여 리스트를 리턴하도록 하였다.

[Ex 11]
map과 either를 이용하여 Right 값만을 더하는 함수를 구현하라고 하였기 때문에 sumRights를 돕는 함수인 sumRights'을 만들어 해결하였다. sumRights'는 Right 값은 그대로 리턴하고 Left 값은 0을 리턴하도록 하였다. 이를 map을 이용하여 주어진 리스트에 적용하고 최종적으로 sum을 이용하여 합을 구하였다.

[Ex 12]
recursion을 이용하여 인수로 주어진 리스트의 가장 마지막 원소 (last xs)를 제일 먼저 적용하고, 나머지 리스트를 다시 함수에 넣어주는 방식으로 해결하였다.

