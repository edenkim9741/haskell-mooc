[Ex 1]
tail recursion을 이용하여 start 값을 리스트의 첫 부분에 추가하고 나머지 리스트는 recursion으로 처리했다.

[Ex 2]
sum 함수를 사용할 수 없기 때문에 recursion을 이용하여 n까지의 합을 구하는 sum 함수를 구현했고, (++)연산 또한 사용할 수 없었기 때문에 낮은 수까지의 합부터 리스트를 채워나가는 방식으로 구현했다. 이를 위해서 sums'라는 재귀 도움 함수를 만들었고, 이 함수는 1부터 n까지의 각각의 합을 리스트로 반환하는 함수이다.

[Ex 3]
pattern matching을 이용하여 리스트가 비었을 때에는 def를 반환하고, 리스트에 값이 하나 있을 때에는 그 값을 반환하고 나머지 경우에는 리스트의 값이 하나가 될 때까지 recursion으로 처리했다.

[Ex 4]
pattern matching을 이용하여 리스트가 비었을 때에는 def를 반환하고, 얻고자 하는 인덱스가 0일 때에는 리스트의 첫번째 값을 반환하고, 나머지 경우에는 인덱스를 하나씩 줄여가며 recursion으로 처리했다.

[Ex 5]
pattern matching을 이용하여 리스트의 값이 하나 이하일 때에는 True를 반환하고, 리스트의 값이 두개 이상일 때에는 리스트의 첫번째 값이 두번째 값보다 크다면 False를 반환하고, 그렇지 않다면 첫번째 값을 제외한 리스트를 인수로 갖도록  recursion으로 처리했다.

[Ex 6]
pattern matching을 이용하여 리스트가 비어있을 때에는 빈 리스트를 반환하고, 리스트의 값이 하나 이상일 때에는 맨 앞에 첫번째 값을 위치시키고 재귀로 반환될 리스트에 첫번째 값을 더하여 뒤쪽에 붙이도록 처리했다.

[Ex 7]
pattern matching을 이용하여 xs가 비었을 때는 ys를 반환하고 ys가 비었을 때는 xs를 반환하도록 처리했다. xs와 ys의 첫번째 값을 비교하여 xs의 값이 더 작다면 xs의 첫번째 값을 리스트 첫번째에 위치시키고 재귀로 xs의 나머지 값과 ys를 인수로 갖도록 처리했다. 반대로 ys의 값이 더 작다면 ys의 첫번째 값을 리스트 첫번째에 위치시키고 재귀로 xs와 ys의 나머지 값들을 인수로 갖도록 처리했다.

[Ex 8]
pattern matching을 이용하여 xs가 비었을 때는 initial을 반환하고 xs의 값이 하나 이상일 때에는 xs의 첫번째 값을 initial과 비교하여 initial을 bigger 함수에 맞는 값으로 바꾸어 재귀함수를 호출하도록 처리했다.

[Ex 9]
pattern matching을 이용하여 as가 비었거나 bs가 빈 경우에는 빈 리스트를 반환하도록하고, 그렇지 않을 때에는 as와 bs의 첫번째 값을 f에 적용한 값을 리스트의 첫번째에 위치시키고 재귀로 as와 bs의 나머지 값들을 인수로 갖도록 처리했다.

